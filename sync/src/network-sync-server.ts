import {Duplex} from 'stream';
import {
  createNetSyncDatagramStream,
  DlpReadDBListMode,
  DlpReadDBListRequest,
  NetSyncDatagramStream,
  NetworkSyncServer,
  SyncConnection,
} from '.';
import {readStream} from './utils';

/** HotSync port to listen on. */
export const NET_SYNC_PORT = 14238;

/** Handshake request 1 from client to server. */
export const NET_SYNC_HANDSHAKE_REQUEST_1 = Buffer.from([
  0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);
/** Handshake response 1 from server to client. */
export const NET_SYNC_HANDSHAKE_RESPONSE_1 = Buffer.from([
  0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x24, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x21, 0x04, 0x27, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);
/** Handshake request 2 from client to server. */
export const NET_SYNC_HANDSHAKE_REQUEST_2 = Buffer.from([
  0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x24, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3c, 0x00, 0x3c, 0x40, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0xa5, 0x1e, 0x04, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);
/** Handshake response 2 from server to client. */
export const NET_SYNC_HANDSHAKE_RESPONSE_2 = Buffer.from([
  0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x20, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3c, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);
/** Handshake request 3 from client to server. */
export const NET_SYNC_HANDSHAKE_REQUEST_3 = Buffer.from([
  0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);

export class NetSyncServer extends NetworkSyncServer<NetSyncConnection> {
  connectionType = NetSyncConnection;
  port = NET_SYNC_PORT;
}

export class NetSyncConnection extends SyncConnection<NetSyncDatagramStream> {
  createDlpStream(rawStream: Duplex): NetSyncDatagramStream {
    return createNetSyncDatagramStream(rawStream);
  }
  async doHandshake() {
    await readStream(this.dlpStream, NET_SYNC_HANDSHAKE_REQUEST_1.length);
    this.dlpStream.write(NET_SYNC_HANDSHAKE_RESPONSE_1);
    await readStream(this.dlpStream, NET_SYNC_HANDSHAKE_REQUEST_2.length);
    this.dlpStream.write(NET_SYNC_HANDSHAKE_RESPONSE_2);
    await readStream(this.dlpStream, NET_SYNC_HANDSHAKE_REQUEST_3.length);
  }
}

if (require.main === module) {
  const syncServer = new NetSyncServer(async ({dlpConnection}) => {
    const readDbListResp = await dlpConnection.execute(
      DlpReadDBListRequest.with({
        mode: DlpReadDBListMode.LIST_RAM | DlpReadDBListMode.LIST_MULTIPLE,
      })
    );
    console.log(readDbListResp.metadataList.map(({name}) => name).join('\n'));
  });
  syncServer.start();
}
